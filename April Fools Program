/**
 * Candyland
 * April 1 2017
 * Chester Banks
 * 
 * By far my BIGGEST and BEST game so far! I worked especially hard on that Gumdrop Land background, and the Queen Frostine graphics. Tell me what you think!
 * 
 * This program's LUCKY SUBSCRIBER is SLOOF LIRPA! He's a great programmer with a hilarious sense of humor!
 * Thanks to my subscribers! Subscribe to me here: khanacademy.org/cs/subscribe/4790207744704512
*/

textAlign(CENTER, CENTER);
textFont(createFont("Arial Black"));

var y = -2652;

var scene = 'Home';
var cards = "RPYGBO".split("");
var card = 'B';
var firstBoard = 'RPYBOGRPYBOGRPYBOGRPYBOGRPYBOGRPYBOGRPYB';
var board = firstBoard.split(""); // R = red, P = purple, Y = yellow, B = blue, O = orange
var onBlock = 'B';
var score = 0;
var slide = 0;

var trans = {x: 0, w: 0, active: true, nextScene: ''};

// The rectangle collision function
var rectCollide = function(one, two){
    if( one.x+one.w > two.x &&
        one.y+one.h > two.y &&
        one.x < two.x+two.w &&
        one.y < two.y+two.h){
        return true;
    }
};

var images = {
    'bg1': function(){
        var rects = [];
        for(var i = 0; i < width; i += 20){
            for(var j = 0; j < height; j += 20){
                rects.push({x: i, y: j, br: random(205), hue: random(255), w: random(10, 50)});
            }
        }
        
        background(255, 255, 255);
        
        for(var i = 0; i < 1000; i += 35){
            stroke(232, 21, 21);
            strokeWeight(15);
            line(i, 0, 0, i);
            stroke(0, 0, 0, 30);
            strokeWeight(5);
            line(i, 0, 0, i);
        }
        
        var textGradient = get(0, 0, width, height);
        
        background(0, 0, 0);
        fill(255, 255, 255);
        textSize(80);
        text("CANDYLAND", width/2, height/2);
        
        var Text = get(0, 0, width, height);
        
        textGradient.mask(Text);
            
        background(255, 255, 255);
        noStroke();
        colorMode(HSB);
        for(var i in rects){
            fill(rects[i].hue, 255, 255, rects[i].br);
            rect(rects[i].x, rects[i].y, rects[i].w, 25, 10);
            fill(0, 0, 0, 10);
            rect(rects[i].x, rects[i].y, rects[i].w, 10, 10);
        }
        filter(BLUR, 2);
        
        colorMode(RGB);
        fill(255, 255, 255, 55);
        for(var i = 0; i < 360; i += 15){
            text("CANDYLAND", width/2 + sin(i)*10, height/2 + cos(i)*10);
        }
        fill(0, 0, 0);
        for(var i = 0; i < 360; i += 15){
            text("CANDYLAND", width/2 + sin(i)*3, height/2 + cos(i)*3);
        }
        image(textGradient, 0, 0);
        
        fill(255, 255, 255);
        textSize(20);
        text("and the missing candy king", 300, 350);
        
        return get(0, 0, 600, 600);
    },
};

var mouse = {clicked: false, overButton: false};

var keys = [];
keyPressed = function(){ keys[keyCode] = true; };
keyReleased = function(){ keys[keyCode] = false; };
mouseClicked = function(){ mouse.clicked = true; };

var Rock = function(x, y, type){
    this.x = x;
    this.y = y; this.originalY = y;
    this.w = 50;
    this.h = 50;
    
    this.type = type;
};
var Rocks = [];
Rock.prototype.draw = function() {
    if(this.y > -100 && this.y < 700){
        switch(this.type){
            case 'Rock':
                fill(163, 163, 163);
                (rect)(this.x, this.y+12, 50, 25, 0, 0, 30, 30);
                arc(this.x, this.y, 50, 50, -180, 0);
                fill(0, 0, 0, 30);
                (rect)(this.x-12.5, this.y+12, 25, 25, 0, 0, 0, 30);
                arc(this.x, this.y, 50, 50, -180, -90);
                break;
            case 'Tree':
                for(var i = 0; i < 360; i += 20){
                    fill(21, 173, 72);
                    ellipse(this.x + sin(i)*25, this.y + cos(i)*25, 20, 20);
                    if(i > 180){
                        fill(0, 0, 0, 30);
                        ellipse(this.x + sin(i)*25, this.y + cos(i)*25, 20, 20);
                    }
                }
                fill(21, 173, 72);
                ellipse(this.x, this.y, 50, 50);
                fill(0, 0, 0, 30);
                arc(this.x, this.y, 50, 50, -270, -90);
                break;
        }
    }
    
    this.y -= 3;
};

var trap = function(x, y, type){
    this.x = x;
    this.y = y;
    this.w = 60;
    this.h = 60;
    
    this.type = type;
    this.hit = false;
    this.hitTrans = 0;
};
trap.prototype.draw = function() {
    noStroke();
    image(images.floor, slide + this.x, this.y);
    if(this.type === "Trap"){
        fill(255, 0, 0, this.hitTrans);
        rect(slide + this.x, this.y, this.w, this.h);
        if(this.hit){
            this.hitTrans -= 10;
        }
        if(this.hitTrans < 0){
            this.hitTrans = 0;
            this.hit = false;
        }
    }
    if(this.type === "Artifact"){
        fill(0, 255, 0);
        image(images.artifact, slide + this.x, this.y);
    }
};

var Finish = function(y){
    this.x = 300;
    this.y = y;
    this.w = width;
    this.h = 60;
};
Finish.prototype.draw = function() {
    for(var i = 20; i < width-15; i += 30){
        for(var j = 15; j < 50; j += 30){
            fill(25);
            rect(i, j + this.y, 15, 15);
            rect(i + 15, j + 15 + this.y, 15, 15);
        }
    }
    this.y -= 3;
};
var finish;

var levelMap = [
    [
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '....      ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '   ---    ',
        '   ---    ',
        '          ',
        '          ',
        '          ',
        '          ',
        '      ....',
        '          ',
        ' .        ',
        '  .       ',
        '   .      ',
        '   ...    ',
        '          ',
        '          ',
        '          ',
        '   ---    ',
        '---       ',
        '--        ',
        '          ',
        '    .     ',
        '     .    ',
        '    .     ',
        '          ',
        '          ',
        '          ',
        '       .. ',
        '          ',
        '          ',
        '          ',
        '          ',
        'FFFFFFFFFF',
    ],
    [
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '....      ',
        '.--..     ',
        '.--..     ',
        '.---..    ',
        '.---..    ',
        '.----..   ',
        '.---..    ',
        '.---..    ',
        '.--..     ',
        '..        ',
        '          ',
        '          ',
        '      ....',
        '          ',
        '          ',
        '     .    ',
        '     .    ',
        '     .    ',
        '     .    ',
        '     .    ',
        '     .    ',
        '     -    ',
        '-         ',
        '--        ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '       .. ',
        '          ',
        '          ',
        '----  ----',
        '          ',
        'FFFFFFFFFF',
    ],
    [
        '          ',
        '          ',
        '          ',
        '          ',
        '...    ...',
        '...    ...',
        '          ',
        '          ',
        '          ',
        '------    ',
        '....-     ',
        '...-      ',
        '..-       ',
        '.-       -',
        '-    -----',
        '      -...',
        '       -..',
        '        -.',
        '..      -.',
        '...     -.',
        '....     -',
        '...      -',
        '  -      -',
        '         -',
        '----      ',
        '         -',
        '         -',
        '--      --',
        '          ',
        '          ',
        '   ....   ',
        '          ',
        '       ...',
        '.   .    .',
        '          ',
        ' .     .  ',
        '          ',
        '    .     ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        'FFFFFFFFFF',
    ],
    [
        '          ',
        '          ',
        '          ',
        '          ',
        '...    ...',
        '....    ..',
        '.....    .',
        '......   -',
        '......   -',
        '          ',
        '    .     ',
        '..      ..',
        '    .     ',
        '..      ..',
        '    .    -',
        '---    ---',
        '---    ---',
        '-   -    -',
        '.   -     ',
        '  -----   ',
        '  -----   ',
        ' -------  ',
        '  .....   ',
        '  .....   ',
        '-------   ',
        '         -',
        '         -',
        '--      --',
        '  -      -',
        '  -    - -',
        '----     -',
        '         -',
        '         -',
        '         -',
        '     -----',
        '--      --',
        '  -      -',
        'FFFFFFFFFF'
    ],
    [
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        '    ..    ',
        '    ..    ',
        '    ..    ',
        '    ..    ',
        '    ..    ',
        '   .  ....',
        '    ..    ',
        '          ',
        '          ',
        '          ',
        '          ',
        '    ..    ',
        '    ..    ',
        '    ..    ',
        '   ....   ',
        '  . ..    ',
        ' .       .',
        '.         ',
        '          ',
        '   ----   ',
        '   ---    ',
        '   --     ',
        '   -      ',
        '   -      ',
        '   -      ',
        '   -      ',
        '   -      ',
        '   -      ',
        '     .... ',
        '          ',
        '          ',
        '          ',
        '          ',
        '          ',
        'FFFFFFFFFF'
    ],
];
var getMap = function(level){
    Rocks = [];
    for(var i in levelMap[level]){
        for(var j in levelMap[level][i].split('')){
            var thingy = levelMap[level][i].split('');
            var letter = thingy[j];
            
            switch(letter){
                case '-':
                    Rocks.push(new Rock(50 + j * 55, i * 100, 'Rock'));
                    break;
                case '.':
                    Rocks.push(new Rock(50 + j * 55, i * 100, 'Tree'));
                    break;
                case 'F':
                    finish = new Finish(i * 100);
                    break;
            }
        }
    }
};

var select; // pre-define the select screen so I can call it

var Player = function(){
    this.x = 300;
    this.y = 300;
    this.w = 60;
    this.h = 130;
    
    this.xvel = 0;
    
    this.MAX_VEL = 4;
    
    this.collidable = true;
    
    this.trail = function(x, y, sz){
        this.x = x;
        this.y = y;
        this.sz = sz;
    };
    this.trails = [];
    this.trail.prototype.draw = function() {
        fill(235, 235, 235);
        ellipse(this.x, this.y, this.sz, this.sz);
        
        this.y -= 3;
    };
};
Player.prototype.draw = function() {
    for(var i in this.trails){
        this.trails[i].draw();
        if(this.trails[i].y < -50){
            this.trails.splice(i, 1);
        }
    }
    fill(0);
    //rect(this.x, this.y, this.w, this.h);
    pushMatrix();
    translate(this.x, this.y - 5);
    scale(0.3);
    rotate(this.xvel*2);
    stroke(25);
    strokeWeight(10);
    line(-100, 20, -200, (-(frameCount*5) % 250) + 200);
    line(100, 20, 200, (-(frameCount*5) % 250) + 200);
    noStroke();
        fill(196, 80, 217);
    pushMatrix();
    rotate(5);
    (rect)(-20, 175, 40, 240, 0, 0, 30, 30); // Left ski
    popMatrix();
    pushMatrix();
    rotate(-5);
    (rect)(20, 175, 40, 240, 0, 0, 30, 30); // Right ski
    popMatrix();
    fill(83, 165, 219);
    rect(0, 70, 100, 125, 40); // Body
    fill(74, 137, 176);
    (rect)(0, 115, 100, 40, 0, 0, 80, 80); // Leg(s)?
    fill(235, 179, 94);
    rect(0, 0, 50, 30, 10); // Neck
    ellipse(-100, 20, 50, 50); // Left hand
    ellipse(100, 20, 50, 50); // Right hand
    fill(0, 0, 0, 30);
    rect(0, -2, 50, 10); // Neck shadow
    fill(235, 179, 94);
    ellipse(0, -100, 200, 200); // Head
    fill(36, 36, 36);
    ellipse(-40, -100, 50, 50); // Left eye
    ellipse(40, -100, 50, 50); // Right eye
    fill(255, 255, 255, 100);
    ellipse(-50, -110, 20, 20); // Left eye highlight
    ellipse(30, -110, 20, 20); // Right eye highlight
    fill(235, 179, 94);
    ellipse(-30, -75, 50, 20); // Skin under left eye
    ellipse(30, -75, 50, 20); // Skin under right eye
    strokeWeight(5);
    stroke(50);
    fill(255);
    arc(0, -70, 100, 100, 0, 180); // Mouth
    line(-50, -70, 50, -70); // Mouth top
    noStroke();
    fill(50);
    arc(0, -50, 90, 60, 0, 180); // Mouth
    fill(112, 112, 112);
    (rect)(-35, 165, 40, 30, 15, 15, 0, 0); // Left shoe
    (rect)(35, 165, 40, 30, 15, 15, 0, 0); // Right shoe
    fill(199, 199, 199);
    (rect)(-35, 175, 40, 10); // Left shoe bottom
    (rect)(35, 175, 40, 10); // Right shoe bottom
    popMatrix();
    
    if(frameCount % 3 === 0){
        this.trails.push(new this.trail(this.x - 15, 375, 20));
        this.trails.push(new this.trail(this.x + 15, 375, 20));
    }
    
    this.x += this.xvel;
    if(keys[RIGHT]){
        this.xvel += 0.1;
    }
    if(keys[LEFT]){
        this.xvel -= 0.1;
    }
    
    if(this.xvel > this.MAX_VEL){
        this.xvel = this.MAX_VEL;
    }
    if(this.xvel < -this.MAX_VEL){
        this.xvel = -this.MAX_VEL;
    }
    
    if(this.x + 30 > width || this.x - 30 < 0){
        this.xvel = -this.xvel;
    }
};
var player = new Player();

var clicked = false;
mouseReleased = function(){
    clicked = true;
};
mouseOut = function(){};

draw = function() {
    for(var i in images){
        if (typeof images[i] !== "object") {
            colorMode(RGB, 255);
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
    
    if(scene === "Home"){
        image(images.bg1, 0, 0);
        fill(255, 255, 255, 200);
        rect(220, 425, 160, 50);
        textSize(35);
        fill(10, 10, 10);
        text('PLAY', 300, 450);
    }
    if(scene === "Game"){
        background(245);
        textSize(20);
        for(var i in board){
            noStroke();
            switch(board[i]){
                case 'R':
                    fill(255, 0, 0);
                    break;
                case 'P':
                    fill(151, 20, 227);
                    break;
                case 'Y':
                    fill(228, 235, 21);
                    break;
                case 'B':
                    fill(21, 157, 235);
                    break;
                case 'O':
                    fill(235, 134, 33);
                    break;
                case 'G':
                    fill(15, 250, 30);
                    break;
            }
            
            strokeWeight(10);
            stroke(0, 0, 0, 50);
            rect(250, y + i * 80, 100, 80, 50);
            noStroke();
            fill(0, 0, 0, 50);
            rect(250, y + i * 80, 100, 80, 50);
            fill(235, 235, 235, 30);
            triangle(250, y + i * 80, 250, y + 80 + i * 80, 350,  y + i * 80);
        }
        
        for(var i in board){
            if(y + i * 80 < 475 && y + i * 80 > 465){
                onBlock = board[i];
            }
        }
        
        fill(209, 138, 62);
        ellipse(300, 510, 40, 40);
        noFill();
        stroke(255);
        strokeWeight(5);
        bezier(280, 510, 300, 520, 300, 500, 320, 510);
        fill(255);
        arc(300, 510, 40, 40, 0, 180);
        stroke(0);
        point(295, 500);
        point(305, 500);
        
        if(onBlock !== card){
            y += 5;
        }
        
        fill(25);
        text("You are on a " + onBlock + " block.\nYou drew a " + card + " card.", 120, 300);
        
        if(mouseX > 410 && mouseX < 560 && mouseY > 200 && mouseY < 300){
            cursor('pointer');
            if(clicked && onBlock === card){
                card = cards[floor(random(cards.length))];
            }
        } else {
            cursor('default');
        }
        
        strokeWeight(5);
        stroke(163, 163, 163);
        fill(217, 217, 217);
        for(var i = 400; i < 415; i += 5){
            rect(i, i - 200, 150, 100);
        }
        fill(255, 255, 255);
        stroke(212, 212, 212);
        rect(410, 350, 150, 100, 5);
        noStroke();
        switch(card){
            case 'R':
                fill(255, 0, 0);
                break;
            case 'P':
                fill(151, 20, 227);
                break;
            case 'Y':
                fill(228, 235, 21);
                break;
            case 'B':
                fill(21, 157, 235);
                break;
            case 'O':
                fill(235, 134, 33);
                break;
            case 'G':
                fill(15, 250, 30);
                break;
        }
        ellipse(485, 400, 70, 70);
        fill(0, 0, 0, 30);
        arc(485, 400, 70, 70, -40, 140);
        textSize(30);
        fill(194, 194, 194);
        pushMatrix();
        translate(485, 260);
        rotate(-25);
        text("candyland", 0, 0);
        popMatrix();
    }
    if(scene === "Lose"){
        background(0);
        
        textSize(200);
        text('LOSER',300, 300);
    }
    
    // Transition
    if(trans.active){
        background(255, 255, 255);
        if(frameCount % 6 === 3){
            score ++;
        }
        
        pushMatrix();
        translate(75,0);
        noStroke();
        fill(250);
        rect(200, 200, 30, 30);
        fill(235);
        rect(232, 200, 30, 30);
        rect(232, 168, 30, 30);
        rect(232, 232, 30, 30);
        rect(200, 168, 30, 30);
        rect(200, 232, 30, 30);
        rect(168, 168, 30, 30);
        rect(168, 200, 30, 30);
        rect(168, 232, 30, 30);
        switch(score%8){
            case 0:
                fill(73, 157, 209);
                rect(168, 168, 30, 30);
                fill(117, 192, 235);
                rect(168, 200, 30, 30);
                fill(191, 225, 245);
                rect(168, 232, 30, 30);
                break;
            case 1:
                fill(73, 157, 209);
                rect(200, 168, 30, 30);
                fill(117, 192, 235);
                rect(168, 168, 30, 30);
                fill(191, 225, 245);
                rect(168, 200, 30, 30);
                break;
            case 2:
                fill(73, 157, 209);
                rect(232, 168, 30, 30);
                fill(117, 192, 235);
                rect(200, 168, 30, 30);
                fill(191, 225, 245);
                rect(168, 168, 30, 30);
                break;
            case 3:
                fill(73, 157, 209);
                rect(232, 200, 30, 30);
                fill(117, 192, 235);
                rect(232, 168, 30, 30);
                fill(191, 225, 245);
                rect(200, 168, 30, 30);
                break;
            case 4:
                fill(73, 157, 209);
                rect(232, 232, 30, 30);
                fill(117, 192, 235);
                rect(232, 200, 30, 30);
                fill(191, 225, 245);
                rect(232, 168, 30, 30);
                break;
            case 5:
                fill(73, 157, 209);
                rect(200, 232, 30, 30);
                fill(117, 192, 235);
                rect(232, 232, 30, 30);
                fill(191, 225, 245);
                rect(232, 200, 30, 30);
                break;
            case 6:
                fill(73, 157, 209);
                rect(168, 232, 30, 30);
                fill(117, 192, 235);
                rect(200, 232, 30, 30);
                fill(191, 225, 245);
                rect(232, 232, 30, 30);
                break;
            case 7:
                fill(73, 157, 209);
                rect(168, 200, 30, 30);
                fill(117, 192, 235);
                rect(168, 232, 30, 30);
                fill(191, 225, 245);
                rect(200, 232, 30, 30);
                break;
        }
        popMatrix();
        
        if(frameCount > 500){
            fill(0);
            textSize(50);
            text('APRIL FOOLS!', 300, 400);
            textSize(20);
            text('Sorry, there\'s no game! xD', 300, 440);
        }
    }
    
    clicked = false;
};
