/** 
 * The Little Hexagons and the Risky Road
 * Team Amplified
 * April 10 2016
 * 
 * @INSTRUCTIONS
    Press to duck
    Release to jump
    You can jump thrice
    Avoid buzzsaws and overhangs
    Grab coins
    
 * @CREDITS (listed in order of most work done)
    Chester Banks
    17mloges
    Stargazer
    Everyone else at TA

 * @CHARACTERS
    
*/

textAlign(CENTER, CENTER);
textFont(createFont("Trebuchet MS"));

var colorScheme = [
    color(255, 255, 255),
    color(255, 255, 255),
];

var hexagon = function(x, y, sz){
    pushMatrix();
    translate(x, y);
    rotate(30);
    beginShape();
    for(var i = 0; i < 360; i += 60){
        vertex(sin(i)*sz, cos(i)*sz);
    }
    endShape();
    popMatrix();
};

var circleCollide = function(a, b){
    if(dist(a.x, a.y, b.x, b.y) < (a.sz + b.sz)/2){
        return true;
    }
};

var player = function(){
    this.x = 60; 
    this.sz = 60;
    this.y = 350;
    
    this.yvel = -10;
    this.jumping = false;
    this.howManyJumps = 0;
    this.possibleJumps = 3;
    
    this.particle = function(x){
        this.x = x;
        this.y = 375;
        this.xSpeed = random(-3, -7);
        this.ySpeed = random(-1);
        this.sz = random(10);
    };
    this.particle.prototype.draw = function() {
        noStroke();
        fill(colorScheme[0]);
        ellipse(this.x, this.y, this.sz, this.sz);
        
        this.x += this.xSpeed;
        this.y += this.ySpeed;
    };
    this.particles = [];
};
player.prototype.draw = function() {
    if(frameCount % 5 === 0 && !this.jumping){
        this.particles.push(new this.particle(this.x));
    }
    for(var i in this.particles){
        this.particles[i].draw();
        if(this.particles[i].x < -50){
            this.particles.splice(i, 1);
        }
    }
    
    pushMatrix();
    if(!this.ducking){
        translate(this.x, this.y);
    } else {
        translate(this.x, this.y+10);
        scale(0.6);
        this.sz = 36;
    }
    noStroke();
    fill(colorScheme[0]);
    hexagon(0, 0, 30);
    fill(0);
    ellipse(0, 0, 8, 8);
    ellipse(10, 0, 8, 8);
    popMatrix();
    
    if(this.jumping){
        this.y += this.yvel;
        this.yvel += 0.5;
    }
    if(this.y > 350 && this.jumping){
        this.y = 350;
        this.howManyJumps = 0;
        this.jumping = false;
    }
    if(mouseIsPressed && !this.jumping){
        this.ducking = true;
    } else {
        this.ducking = false;
    }
    
    text(this.howManyJumps, this.x, this.y-30);
};
var Player = new player();

var coin = function(x, y){
    this.x = x;
    this.y = y;
    this.sz = 20;
    
    this.collectible = true;
    this.trans = 255;
    this.animate = false;
};
coin.prototype.draw = function() {
    pushMatrix();
    translate(this.x, this.y);
    scale(sin(frameCount*5), 1);
    noStroke();
    fill(255, 255, 255, this.trans - 220);
    for(var i = this.sz; i < this.sz*2; i += 5){
        ellipse(0, 0, i, i);
    }
    strokeWeight(3);
    stroke(196, 196, 18, this.trans);
    fill(224, 227, 36, this.trans);
    ellipse(0, 0, this.sz, this.sz);
    fill(196, 196, 18, this.trans);
    textSize(this.sz/1.5);
    text("$", 0, 0);
    popMatrix();
    
    if(circleCollide(this, Player) && this.collectible){
        this.collectible = false;
        this.animate = true;
        
    }
    if(this.animate){
        this.trans -= 20;
        this.sz ++;
    }
    
    this.x -= 5;
};
var coins = [];

var obstacle = function(x){
    this.x = x;
    this.sz = 110;
    this.type = floor(random(2));
    
    if(this.type === 0){
        this.y = 390;
    } else {
        this.y = 0;
    }
    
    this.rot = 0;
};
obstacle.prototype.draw = function() {
    if(this.type === 0){
        noStroke();
        fill(colorScheme[0]);
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.rot);
        ellipse(0, 0, 100, 100);
        for(var i = 0; i < 360; i += 10){
            pushMatrix();
            rotate(i);
            triangle(-5, -45, 5, -45, 0, -60);
            popMatrix();
        }
        popMatrix();
        
        if(circleCollide(this, Player)){
            background(255, 0, 0);
        }
        
        this.rot -= 2;
        this.x -= 5;
    }
    if(this.type === 1){
        fill(colorScheme[0]);
        pushMatrix();
        translate(this.x, this.y);
        rect(0, 0, 50, 340);
        popMatrix();
        
        if(Player.x + (Player.sz/2) > this.x && Player.x < this.x+50 && !Player.ducking){
            background(255, 0, 0);
        }
        
        this.x -= 5;
    }
};
var obstacles = [];

mouseReleased = function(){
    if(Player.howManyJumps < Player.possibleJumps){
        Player.jumping = true;
        Player.yvel = -10;
        Player.howManyJumps ++;
    }
};

draw = function() {
    background(colorScheme[1]);
    
    noStroke();
    for(var i = 0; i < width; i += 60){
        for(var j = 0; j < height; j += 35){
            fill(0, 0, 0, 50 + sin(j+frameCount*5)*10);
            hexagon(i, j, 20);
            hexagon(i+30, j+17.5, 20);
        }
    }
    fill(colorScheme[0]);
    rect(0, 375, width, 25);
    for(var i = -60; i < 200; i += 30){
        fill(0, 0, 0, 100 - i/2);
        beginShape();
        vertex(0, i);
        vertex(0, i + 30);
        vertex(200, i + 90);
        vertex(400, i + 30);
        vertex(400, i);
        vertex(200, i + 60);
        endShape();
    }
    
    if(frameCount % 200 === 0){
        obstacles.push(new obstacle(random(450, 600)));
    }
    if(frameCount % 100 === 0){
        coins.push(new coin(random(450, 600), random(350)));
    }
    
    Player.draw();
    for(var i in obstacles){
        obstacles[i].draw();
        if(obstacles[i].x < -150){
            obstacles.splice(i, 1);
        }
    }
    for(var i in coins){
        coins[i].draw();
        if(coins[i].x < -150){
            coins.splice(i, 1);
        }
    }
};
