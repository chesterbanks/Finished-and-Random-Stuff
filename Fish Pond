/**
 * Fish Pond
 * Chester Banks
 * January 14 2018
 * 
 * This was made in less than an hour for The Hour Challenge Contest! Whew, it required a lot of fast typing and quick thinking, haha!
*/

// He said no credit was necessary but Isaac Emerald helped me fix a bug and add more controls. Thanks Isaac!

// Scene variable
var scene = 'Menu';

// Transition
var trans = {
    active: false,
    w: 600,
    h: 400,
    r: 0,
    out: false,
    nxtScene: '',
};

// Keys
var space = false;
var keys = [];
keyPressed = function(){ keys[keyCode] = true; space = true; };
keyReleased = function(){ keys[keyCode] = false; };

// Mouse
var clicked = false;
mouseClicked = function(){ clicked = true; };

// Hooks
var Hook = function(){
    this.x = random(600);
    
    this.hook = 0;
    this.hookDestination = random(100, 350);
    
    this.timer = 0;
    this.endTimer = random(200, 400);
    
    this.snap = false;
    this.trans = 255;
};
Hook.prototype.draw = function() {
    strokeWeight(1);
    stroke(255, 255, 255, this.trans);
    line(this.x, 0, this.x, this.hook);
    
    pushMatrix();
    translate(this.x, this.hook);
    noFill();
    strokeWeight(3);
    stroke(186, 186, 186, this.trans);
    bezier(0, 0, 6, 14, 16, 13, 12, -6);
    bezier(0, 0, -6, 14, -16, 13, -12, -6);
    bezier(0, 0, -6, 14, -5, 25, -6, -6);
    
    stroke(240, 104, 158, this.trans);
    bezier(10 + cos(this.x+frameCount*5)*10, -10 + sin(this.x+frameCount*5)*10, -7, -22, 12, 21, -10, 10 + sin(this.x+frameCount*5)*10);
    
    popMatrix();
    
    if(this.timer > this.endTimer){
        this.hook /= 1.1;
    } else {
        this.hook += (this.hookDestination - this.hook) / 20;
    }
    
    this.timer ++;
    
    if(this.snap){
        this.trans /= 1.1;
    }
};
var Hooks = [];

// Score
var score = 0, bestScore = 0,
    mouthDelay = 0;

// Fish
var Fish = function(){
    this.x = 100;
    this.y = 300;
    this.w = 85;
    this.h = 30;
    
    this.xvel = 0;
    this.yvel = 0;
    
    this.caught = false;
    this.whichHook = 0;
    
    this.mouthY = 0;
    
    this.Bubble = function(x, y){
        this.x = x;
        this.y = y;
        this.sz = random(5);
        this.trans = 150;
        
        this.xvel = random(-1, 1);
    };
    this.Bubble.prototype.draw = function() {
        noStroke();
        fill(255, 255, 255, this.trans);
        ellipse(this.x, this.y, this.sz, this.sz);
        
        this.x += this.xvel;
        this.y -= this.sz;
        
        this.trans /= 1.1;
    };
    this.Bubbles = [];
};
Fish.prototype.draw = function() {
    /*this.Bubbles.push(new this.Bubble(this.x, this.y));
    
    for(var i = this.Bubbles.length - 1; i >= 0; i --){
        this.Bubbles[i].draw();
        if(this.Bubbles[i].trans < 5){
            this.Bubbles.splice(i, 1);
        }
    }*/
    
    pushMatrix();
    translate(this.x, this.y);
    noStroke();
    fill(202, 214, 36);
    beginShape();
    vertex(10, 24);
    bezierVertex(21, 35, 82, 23, 82, 19);
    bezierVertex(78, 2, 50, -7, 12, 21);
    endShape();
    triangle(12, 24, 3, 30, 1, 9);
    fill(45);
    ellipse(71, 17, 5, 5);
    stroke(202, 214, 36);
    strokeWeight(5);
    line(51, 24, 77, 21 + this.mouthY);
    popMatrix();
    
    if(!this.caught){
        if(keys[RIGHT] || keys[68]){
            this.xvel ++;
        }
        if(keys[LEFT] || keys[65]){
            this.xvel --;
        }
        if(keys[DOWN] || keys[83]){
            this.yvel ++;
        }
        if(keys[UP] || keys[87]){
            this.yvel --;
        }
        
        if(!keys[LEFT] && !keys[RIGHT]){
            this.xvel /= 1.3;
        }
        if(!keys[UP] && !keys[DOWN]){
            this.yvel /= 1.3;
        }
        
        this.xvel = constrain(this.xvel, -3, 3);
        this.yvel = constrain(this.yvel, -3, 3);
        
        this.x += this.xvel;
        this.y += this.yvel;
    } else {
        this.y = Hooks[this.whichHook].hook;
    }
    
    // Collision with lures
    for(var i = Hooks.length - 1; i >= 0; i --){
        if(clicked || keys[32])
        {
            if(this.x + this.w > Hooks[i].x && this.x + this.w - 50 < Hooks[i].x && this.y + this.h < Hooks[i].hook - 20 && !Hooks[i].snap){
                Hooks[i].snap = true;
                score ++;
            }
        }
        if(this.x + this.w > Hooks[i].x && this.x + this.w - 35< Hooks[i].x && this.y < Hooks[i].hook && this.y > Hooks[i].hook - this.h && !this.caught){
            Hooks[i].timer = 400;
            this.x = Hooks[i].x - this.w + 15;
            this.whichHook = i;
            this.caught = true;
        }
    }
    
    if(mouthDelay <= 0)
    {
        if(clicked || keys[32]){
            this.mouthY = 30;
            mouthDelay++;
        }
    }else if(!clicked && !keys[32]) {
        mouthDelay = 0;
    }
    
    this.mouthY /= 1.5;
    
    if(this.y < 30){ this.y = 30; }
};
var fish = new Fish();

// Fonts
textFont(createFont('Avenir Bold'));
textAlign(CENTER, CENTER);

// Everything else
draw = function() {
    background(97, 183, 194);
    
    noStroke();
    fill(255, 255, 255, 30);
    quad(50, 0, 100, 0, 339, 400, 92, 400);
    quad(272, 0, 360, 0, 279, 400, 37, 400);
    quad(547, 0, 576, 0, 564, 400, 430, 400);
    
    fill(136, 211, 219);
    rect(0, 0, width, 50);
    
    if(scene === 'Menu'){
        pushMatrix();
        if(mouseIsPressed && mouseX > 590){
            scale(1.5, 1);
            translate(-100, 0);
        }
        translate(0, -15);
        fill(255);
        textSize(100);
        text('FISH', 300, 177);
        textSize(73);
        text('POND', 300, 250);
        textSize(17);
        text('C H E S T E R   B A N K S', 300, 299);
        fill(0, 0, 0, 100 + sin(frameCount*3)*100);
        textSize(19);
        text('[   C L I C K   T O   B E G I N   ]', 300, 375);
        
        noFill();
        stroke(255);
        strokeWeight(7);
        rectMode(CENTER);
        rect(300, 222, 240, 200);
        stroke(255, 255, 255, 50);
        rect(300, 222, 269, 228);
        rectMode(CORNER);
        
        noStroke();
        fill(118, 194, 204);
        rect(251, 141, 24, 25);
        fill(255);
        ellipse(263, 151, 20, 20);
        popMatrix();
        
        if(space || clicked){
            trans.active = true;
            trans.nxtScene = 'How';
        }
    }
    if(scene === 'How'){
        fill(255);
        textSize(50);
        text('HOW TO PLAY', 300, 115);
        textSize(18);
        text('\u25C8 move with the arrow keys or WASD\n\n\u25C8 click and/or space to bite a fishing line\n\n\u25C8 stay away from the hooks at all costs\n\n\u25C8 bite as many fishing lines as you can', 300, 235);fill(0, 0, 0, 100 + sin(frameCount*3)*100);
        textSize(19);
        text('[   C L I C K   T O    P L A Y   ]', 300, 350);
        
        if(clicked || space){
            trans.active = true;
            trans.nxtScene = 'Game';
        }
    }
    if(scene === 'Game'){
        
        
        fill(255, 255, 255, 100);
        textSize(75);
        text(score, 300, 220);
        
        rectMode(CENTER);
        pushMatrix();
        translate(300, 220);
        rotate(45);
        noFill();
        strokeWeight(8);
        stroke(255, 255, 255, 100);
        rect(0, 0, 80, 80);
        strokeWeight(2);
        stroke(255, 255, 255, 50);
        rect(0, 0, 100, 100);
        popMatrix();
        rectMode(CORNER);
        
        if(frameCount % 30 === 0){
            Hooks.push(new Hook());
        }
        
        for(var i = Hooks.length - 1; i >= 0; i --){
            Hooks[i].draw();
            if(Hooks[i].trans < 5 || (Hooks[i].timer > Hooks[i].endTimer && Hooks[i].hook < 1)){
                Hooks.splice(i, 1);
            }
        }
        
        fish.draw();
        
        if(fish.caught && fish.y < 150){
            clicked = false;
            trans.active = true;
            trans.nxtScene = 'Lose';
        }
        
        noStroke();
        fill(136, 211, 219);
        rect(0, 26, width, 24);
    }
    if(scene === 'Lose'){
        fill(255);
        textSize(30);
        text('YOU TOOK THE BAIT!', 300, 200);
        textSize(45);
        text('SCORE ' + score, 300, 243);
        textSize(35);
        text('TOP ' + bestScore, 300, 292);
        
        if(score > bestScore)
        {
            bestScore = score;
        }
        
        fill(0, 0, 0, 100 + sin(frameCount*3)*100);
        textSize(19);
        text('[   C L I C K   T O    R E S T A R T   ]', 300, 330);
        
        if(clicked || space){
            Hooks = [];
            fish = new Fish();
            trans.active = true;
            trans.nxtScene = 'Menu';
        }
    }
    
    if(trans.active){
        rectMode(CENTER);
        noStroke();
        fill(255);
        pushMatrix();
        translate(300, 200);
        rotate(trans.r);
        rect(0, 0, trans.w, trans.h);
        
        if(!trans.out){
            trans.w += (600 - trans.w) / 50;
            trans.h += (400 - trans.h) / 50;
            trans.r += (180 - trans.r) / 5;
            if(trans.r > 170){
                trans.out = true;
                scene = trans.nxtScene;
            }
        } else {
            trans.w += (0 - trans.w) / 10;
            trans.h += (0 - trans.h) / 10;
            trans.r += (0 - trans.r) / 10;
            if(trans.r < 1){
                trans.active = false;
                trans.w = 600;
                trans.h = 400;
                trans.r = 0;
                trans.out = false;
            }
        }
        
        popMatrix();
        rectMode(CORNER);
    }
    
    if(scene === 'Menu') // reset score
    {
        score = 0;
    }
    
    clicked = false;
    space = false;
};

